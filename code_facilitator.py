import traceback
import autopep8
import ast
from difflib import unified_diff
import google.generativeai as genai

genai.configure(api_key="AIzaSyAWJHRUDNo2jqlmSJgKAKq7hOc3c1OHpRA")
# =======================
# M√≥dulo 1: Entrada
# =======================
def receber_pedido_usuario():
    # Fun√ß√£o que recebe o texto do usu√°rio
    return input("Digite sua d√∫vida: ")

def receber_codigo_usuario():
    # Fun√ß√£o que recebe o texto do usu√°rio
    return input("Digite seu algoritmo: ")

# =======================
# M√≥dulo 2: An√°lise de Inten√ß√£o
# =======================
def detectar_intencao(texto):
    texto = texto.lower()  # Deixa tudo min√∫sculo para facilitar compara√ß√£o
    if "erro" in texto or "bug" in texto or "errado" in texto
        return "corrigir"
    elif "refa√ßa com" in texto or "adapte para" in texto
        return "adaptar"
    elif "refa√ßa" in texto or "refazer" in texto or "gere novamente" in texto
        return "refazer"
    elif "converta" in texto or "converter para" in texto or "traduza para" in texto
        return "converter"
    elif "explique" in texto or "o que" in texto
        return "explicar"
    elif "melhore" in texto or "melhorar" in texto
        return "melhorar"
    elif "gere" in texto or "fa√ßa" in texto
        return "gerar"
    

# =======================
# M√≥dulo 3: An√°lise de Emo√ß√£o
# =======================
def detectar_emocao(instrucao_usuario):
    texto = instrucao_usuario.lower()
    sinais_cansaco = ["cansado", "exausto", "mentalmente", "sem cabe√ßa", "com sono"]
    sinais_urgencia = ["urgente", "agora", "correndo", "sem tempo", "√∫ltima hora"]
    iniciante = ["iniciante", "comecei", "sou novo", "n√£o sei programar"]

    ced = 1.0 if any(p in texto for p in sinais_cansaco + sinais_urgencia) else 0.3
    ecu = 1.0 if any(p in texto for p in iniciante + sinais_cansaco) else 0.5
    return ecu, ced


# =======================
# M√≥dulo 4: Processamento T√©cnico
# =======================

def adaptar_codigo(codigo_original, instrucoes):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o inteligente. Seu trabalho √© adaptar o c√≥digo "
        "fornecido de acordo com as instru√ß√µes a seguir. Responda apenas com o c√≥digo final, "
        "sem explica√ß√µes ou coment√°rios.\n\n"
        f"C√≥digo Original:\n{codigo_original.strip()}\n\n"
        f"Instru√ß√µes:\n{instrucoes.strip()}\n\n"
        "C√≥digo Adaptado:"
    )

    response = model.generate_content(prompt)
    return response.text.strip()

def refazer_codigo(codigo_original):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o. Reescreva o seguinte c√≥digo mantendo exatamente a mesma l√≥gica, "
        "mas utilizando uma estrutura diferente. Pode trocar comandos, estruturas de repeti√ß√£o ou organiza√ß√£o geral, "
        "desde que o comportamento do algoritmo permane√ßa o mesmo.\n\n"
        f"C√≥digo original:\n{codigo_original.strip()}\n\n"
        "C√≥digo refeito:"
    )

    response = model.generate_content(prompt)
    return response.text.strip()

def converter_codigo(codigo_original, instrucoes):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o. Sua tarefa √© converter o c√≥digo fornecido "
        "para outra linguagem especificado pelo usu√°rio.\n\n"
        " -Identifique automaticamente a linguagem do c√≥digo original.\n"
        " -Converta para a linguagem de destino especificada.\n"
        " -Mantenha a mesma l√≥gica e comportamento do c√≥digo.\n"
        " -Responda apenas com o c√≥digo convertido, sem explica√ß√µes ou coment√°rios.\n\n"
        f"üßæ C√≥digo original:\n{codigo_original.strip()}\n\n"
        f"üéØ Instru√ß√£o do usu√°rio:\n{instrucao_usuario.strip()}\n\n"
        "üí° C√≥digo convertido:"
    )

    response = model.generate_content(prompt)
    return response.text.strip()

def melhorar_codigo(codigo_original):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o especializado em otimiza√ß√£o de c√≥digo.\n\n"
        "Identifique a linguagem de programa√ß√£o usada e reescreva o seguinte c√≥digo de forma que ele mantenha exatamente a mesma l√≥gica, "
        "mas com uma ou mais das seguintes melhorias:\n"
        "- Menor tempo de execu√ß√£o (melhor desempenho)\n"
        "- Menor uso de mem√≥ria\n"
        "- Menor quantidade de linhas (mais conciso)\n\n"
        "N√£o altere a l√≥gica do que o c√≥digo faz.\n"
        "Responda apenas com o c√≥digo melhorado, sem explica√ß√µes.\n\n"
        f"C√≥digo Original:\n{codigo_original.strip()}\n\n"
        "C√≥digo Melhorado:"
    )

    response = model.generate_content(prompt)
    return response.text.strip()

def gerar_codigo(instrucoes_usuario):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o especializado em gera√ß√£o de algoritmo.\n\n"
        "Gere o algoritmo de acordo com as instru√ß√µes fornecidas"
        "Caso a linguagem de programa√ß√£o n√£o for fornecida, gerar em Python"
        "Responda apenas com o c√≥digo gerado"
        f"Instru√ß√µes fornecidas:\n{instrucoes_usuario.strip()}\n\n"
        "C√≥digo gerado:"
    )

def processar_codigo(texto, intencao, algoritmo):
    if intencao == "corrigir":#Corre√ß√£o
        codigo_atual = algoritmo
        max_tentativas = 3
        tentativas = 0

        while tentativas < max_tentativas:
            try:
                exec(codigo_atual, {}, {})
                return (
                    True
                )
            except Exception as e:
                tentativas += 1
                codigo_atual = autopep8.fix_code(codigo_atual)
                if tentativas == max_tentativas
                    max_tentativas += 1
    

    elif intencao == "explicar":#Explica√ß√£o
        try:
            arvore = ast.parse(codigo_atual)
        except Exception as e:
            return f"‚ùå N√£o foi poss√≠vel analisar o c√≥digo. Erro de sintaxe: {e}"

        explicacoes = []

        for node in arvore.body:
            if isinstance(node, ast.FunctionDef):
                explicacoes.append(f"üß© A fun√ß√£o `{node.name}` √© definida com os par√¢metros: {', '.join(arg.arg for arg in node.args.args)}.")

            elif isinstance(node, ast.For):
                target = ast.unparse(node.target)
                iter_ = ast.unparse(node.iter)
                explicacoes.append(f"üîÅ Um loop `for` que percorre `{iter_}`, atribuindo cada valor a `{target}`.")

            elif isinstance(node, ast.If):
                cond = ast.unparse(node.test)
                explicacoes.append(f"üîé Uma estrutura `if` que verifica se `{cond}` √© verdadeiro.")

            elif isinstance(node, ast.Assign):
                targets = ', '.join(ast.unparse(t) for t in node.targets)
                value = ast.unparse(node.value)
                explicacoes.append(f"üìå Atribui√ß√£o: `{targets}` recebe `{value}`.")

            elif isinstance(node, ast.Expr):
                if isinstance(node.value, ast.Call):
                    call_repr = ast.unparse(node)
                    explicacoes.append(f"‚öôÔ∏è Chamada de fun√ß√£o: `{call_repr}`.")
            
            elif isinstance(node, ast.While):
                condicao = ast.unparse(node.test)
                explicacoes.append(f"üîÅ Um loop `while` que repete enquanto `{condicao}` for verdadeiro.")

            elif isinstance(node, ast.Return):
                if node.value is not None:
                    valor = ast.unparse(node.value)
                    explicacoes.append(f"üîô O comando `return` devolve o valor `{valor}` para quem chamou a fun√ß√£o.")
                else:
                    explicacoes.append("üîô O comando `return` devolve `None` (nenhum valor).")
            # outros tipos podem ser adicionados aqui (while, return, etc.)
            return "\n".join(explicacoes)
    elif intencao == "adaptar":
        codigo_original = algoritmo  # essa vari√°vel vem da fun√ß√£o que recebe o c√≥digo
        instrucoes = texto    # essa vari√°vel vem da fun√ß√£o que recebe as instru√ß√µes
        codigo_adaptado = adaptar_codigo(codigo_original, instrucoes)
        return codigo_adaptado
    elif intencao == "refazer":
        codigo_original = algoritmo
        instrucoes = texto
        codigo_refeito = refazer_codigo(codigo_original, texto)
        return codigo_refeito
    elif intencao == "melhorar":
        codigo_original = algoritmo
        codigo_melhorado = melhorar_codigo(codigo_original)
        return codigo_melhorado
    elif intencao == "gerar":
        instrucoes = texto
        codigo_gerado = gerar_codigo(instrucoes)
        return codigo_gerado

# =======================
# M√≥dulo 5: Utilidade
# =======================
def ajustar_pesos(ecu, ced):
    if ecu > 0.7:
        w1 = 0.4
        w2 = 0.5
    else:
        w1 = 0.6
        w2 = 0.3
    w3 = 0.4 if ced > 0.6 else 0.2
    return w1, w2, w3

def avaliar_feedback(feedback_usuario):
    positivo = ["funcionou", "perfeito", "era isso", "√≥timo", "ok", "deu certo"]
    negativo = ["n√£o ajudou", "n√£o entendi", "confuso", "erro", "n√£o foi isso", "outra", "fraco"]

    texto = feedback_usuario.lower()
    qts = 0.9 if any(p in texto for p in positivo) else 0.4
    return qts

def calcular_utilidade(qts, ecu, ced, w1, w2, w3):
    utilidade = (qts * w1) + ((1 / max(ecu, 0.01)) * w2) - (ced * w3)
    return round(utilidade, 3)

    

# =======================
# M√≥dulo 6: Gera√ß√£o da Resposta
# =======================
def explicacoes_codigo_gerado(respostaIA_gerada):
    model = genai.GenerativeModel("gemini-1.5-pro")

    prompt = (
        "Voc√™ √© um assistente de programa√ß√£o inteligente. Seu trabalho √© dar uma pequena explica√ß√£o ao usu√°rio o que o c√≥digo gerado faz.\n\n"
        f"C√≥digo Rerado:\n{respostaIA_gerada.strip()}\n\n"
    )

    response = model.generate_content(prompt)
    return response.text.strip()

def gerar_resposta(respostaIA_gerada, utilidade, cansaco):
    if cansaco > 0.3:
        print(f"\nAqui est√° o pedido solicitado:\n{respostaIA_gerada}")
    else:
        print(f"\nResposta final gerada:\n{explicacoes_codigo_gerado(respostaIA_gerada)}")
    

# =======================
# M√≥dulo Principal
# =======================
def code_facilitator():
    # Entrada do usu√°rio
    texto = receber_pedido_usuario()
    algoritmo = receber_codigo_usuario()

    # An√°lise de inten√ß√£o e emo√ß√£o
    intencao = detectar_intencao(texto)
    ecu, ced = detectar_emocao(texto)

    # Processamento da tarefa t√©cnica
    resposta_tecnica = processar_codigo(texto, intencao, algoritmo)

    # Feedback do usu√°rio
    #feedback_usuario = input("\nüó£Ô∏è Qual seu feedback sobre a resposta? (ex: funcionou, n√£o entendi, etc.): ")
    #qts = avaliar_feedback(feedback_usuario)

    # Ajuste din√¢mico dos pesos com base nas emo√ß√µes
    w1, w2, w3 = ajustar_pesos(ecu, ced)

    # C√°lculo da utilidade final
    #utilidade = calcular_utilidade(qts, ecu, ced, w1, w2, w3)

    # Gera√ß√£o e exibi√ß√£o da resposta final
    gerar_resposta(resposta_tecnica, utilidade, ced)

    #print(f"\nüìä Utilidade estimada da resposta: {utilidade}")


# Executar o agente
if __name__ == "__main__":
    code_facilitator()
